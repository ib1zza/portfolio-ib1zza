{
  "kanban": {
    "mini": "Joint project by [https://github.com/pinchedmon(@pinchedmon)] and [https://github.com/ib1zza(@ib1zza)]. A website project with functionality for creating Kanban boards, allowing for their collaborative use.",
    "base": "Joint project by [https://github.com/pinchedmon(@pinchedmon)] and [https://github.com/ib1zza(@ib1zza)] </br> A website project with functionality for creating Kanban boards, allowing for their collaborative use by multiple users (possibly even simultaneously). Collaborative work is facilitated by the use of Firebase Realtime Database. Redux Toolkit is used for data storage. Storybook is integrated into the project. Feature Sliced Design methodology is used for the file structure. Tests are written using the Jest library."
  },
  "todo": {
    "mini": "Simple todo list with basic functions: add todo, complete, edit, delete. Also added list of completed todos.",
    "base": "Simple todo list with basic functions: add todo, complete, edit, delete. Also added list of completed todos."
  },
  "pizza": {
    "mini": "Website for ordering pizzas. There is functionality for selecting pizzas by category, searching by name and sorting by popularity.",
    "base": "Website for ordering pizzas. There is functionality for selecting pizzas by category, searching by name and sorting by popularity. Pizza can be added to the cart, each type of dough and pizza size has its own price and is added to the cart as a separate item. The site displays correctly on any device (320 - 4096)px."
  },
  "weather": {
    "mini": "Weather website with weakly and daily forecast. Built using openweathermap.org API.",
    "base": "Weather website with weakly and daily forecast. Built using openweathermap.org API. There is a functional search of the city, the output of information about the weather by the day, or in the format for every three hours. Also, the last selected cities are stored in the localStorage and for quick access to the history you can use select, which is located in the header of the site. There is also the functionality to change the light and dark theme. The layout is responsive and adjusts to any screen size."
  },
  "movies": {
    "mini": "This is a movie search application. It uses moviesdatabas from rapidapi.com to retrieve information about movies.",
    "base": " This is a movie search application. It uses moviesdatabas from rapidapi.com to retrieve information about movies. The app has a wide range of functionality to search for movies, sampling by category, release date, and genre. Each movie has its own page with details about it. For TV series, their series by season are also displayed. There is also functionality to add a movie to your favorites. The application is hosted by vercel."
  },
  "chat": {
    "mini": "Chat application with a lot of functions. Built using Google Firebase.",
    "base": "A website with chat functionality. Authentication and storage of chat and user data using google firebase. There is functionality of registration and logging into the account (using email / google account, search for users by username, sending and receiving messages in real time, sending files together with the text, delete chat for both users, edit personal information (username, avatar), change of application theme, change of language (Russian, English). The site is displayed correctly on any device (320 - 4096)px."
  },
  "stellar-burgers": {
    "base": "Project work of Yandex Practicum. Burger constructor website with registration and login functionality, building your own burger and placing an order. The user has a personal account where all his orders are stored, there is an opportunity to edit personal data. The project uses unit and e2e testing using Jest and Cypress.",
    "mini": "Project work of Yandex Practicum. Burger constructor website with registration and login functionality."
  },
  "web-larek": {
    "mini": "Project work of Yandex Practicum. Online store of fictional goods. Written using the MVC pattern in Typescript.",
    "base": "Project work of Yandex Practicum. Online store of fictional goods. Written using the MVC pattern in Typescript. Interaction between the presentation layer (view) and the data layer (model) is carried out using events (EventEmitter class). There is form validation when placing an order."
  },
  "me": {
    "heading": "Mikhail is a ",
    "headingTyping1": "Frontend developer",
    "headingTyping2": "Web designer",
    "headingTyping3": "ThreeJS developer",
    "subheading": "I create websites using modern development tools and try to develop my skills in frontend development.",
    "contactme": "Contact me",
    "contactsText": "I'm always open to suggestions for collaborative development! I like to get the experience of teamwork on projects. If you are interested, please write to me!",
    "messageMeHere": "Message me here"
  },
  "links": {
    "home": "home",
    "works": "projects"
  },
  "global": {
    "projects": "projects",
    "skills": "skills",
    "contacts": "contacts",
    "media": "media",
    "education": "education"
  },
  "skills": {
    "languages": "languages",
    "frameworks": "frameworks",
    "tools": "tools",
    "other": "other"
  },
  "view": "view",
  "projects": {
    "stack": "Stack",
    "description": "Project description",
    "wantToCheck": "You want to check it out?",
    "viewDeployment": "view deployment",
    "githubLink": "view code on github"
  }
}
